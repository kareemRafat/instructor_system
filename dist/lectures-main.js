import{getMetaContent,capitalizeFirstLetter,wait}from"./helpers.js";const branch=document.getElementById("branch"),instructor=document.getElementById("instructor"),lecturesCards=document.getElementById("lecturesCards"),groupTimeSelect=document.getElementById("group-time"),tracks=document.getElementById("tracks"),skeleton=document.getElementById("skeleton"),arrowWarning=document.getElementById("arrow-warning");async function fetchTracks(){try{const e=await fetch("functions/Tracks/get_tracks.php");if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);const t=await e.json();tracks.innerHTML="<option value=''>Select Track</option>",t.data&&t.data.forEach((e=>{const t=document.createElement("option");t.value=e.id,t.textContent=capitalizeFirstLetter(e.name),tracks.appendChild(t)}))}catch(e){console.error("Error fetching tracks:",e),tracks.innerHTML="<option value=''>Error loading tracks</option>"}}async function fetchBranchAndTrackLec(e,t){try{const r=await fetch(`functions/Lectures/get_lectures.php?branch_id=${e}&track_id=${t}`);if(!r.ok)throw new Error(`HTTP error! status: ${r.status}`);const n=await r.json();if("success"!=n.status)throw new Error(n.message||"Failed to fetch lectures");n.data.length>0?(lecturesCards.innerHTML="",n.data.forEach((e=>{let t=setCard(e);lecturesCards.innerHTML+=t}))):lecturesCards.innerHTML="<p>No lectures found</p>"}catch(e){console.error("Error fetching lectures:",e),lecturesCards.innerHTML="<p>Failed to load lectures. Please try again.</p>"}}function setCard(e){let t="",r=e.track_name.toLowerCase();return"php"==r||r.toLowerCase().includes("database")||r.includes("project")?t="bg-red-500":"html"==r||r.includes("css")?t="bg-green-500":r.includes("javascript")&&(t="bg-cyan-500"),`\n  <li class="relative mb-6 flex-shrink-0">   \n    <div class="flex items-center">\n    <div class="z-10 flex items-center justify-center w-6 h-6 bg-blue-100 rounded-full ring-0 ring-white sm:ring-8 shrink-0">\n      <svg class="w-2.5 h-2.5 text-blue-800" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">\n      <path d="M20 4a2 2 0 0 0-2-2h-2V1a1 1 0 0 0-2 0v1h-3V1a1 1 0 0 0-2 0v1H6V1a1 1 0 0 0-2 0v1H2a2 2 0 0 0-2 2v2h20V4ZM0 18a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V8H0v10Zm5-8h10a1 1 0 0 1 0 2H5a1 1 0 0 1 0-2Z" />\n      </svg>\n    </div>\n    <div class="hidden sm:flex w-full bg-gray-200 h-0.5"></div>\n    </div>\n    <div class="mt-3 sm:pe-0 pb-7 border-indigo-500 border-b-2">\n      <div class="flex items-center gap-2">\n        <i class="fas fa-circle-check text-zinc-500"></i>\n        <h3 class="text-2xl mb-1 font-semibold tracking-wide text-amber-500">${capitalizeFirstLetter(e.group_name)}</h3>\n        <span class="ml-2 inline-flex items-center rounded-md bg-yellow-50 px-2 py-1 text-xs font-medium text-yellow-800 ring-1 ring-yellow-600/20 ring-inset ">${2==e.group_time||5==e.group_time?e.group_time+" - Friday":8==e.group_time?"Online":e.group_time}</span>\n        <span class="ml-2 inline-flex items-center rounded-md bg-indigo-50 px-3 py-1 text-xs font-medium text-indigo-800 ring-1 ring-indigo-600/20 ring-inset ">${e.group_start_date}</span>\n      </div>\n      <div class="block mt-1 mb-4 text-md font-semibold tracking-wide leading-none text-gray-500"><i class="fab fa-teamspeak mr-1"></i> Instructor :  ${capitalizeFirstLetter(e.instructor_name)}</div>\n\n      <time class="block mb-4 text-sm font-normal leading-none text-gray-400"><i class="fas fa-calendar-check mr-1"></i> Commented on ${e.latest_comment_date}</time>\n\n      <p class="relative w-full border border-blue-200 bg-blue-50 pl-3 p-2 py-3 rounded-md text-base font-semibold text-gray-500 h-[76px] flex">\n        <span class="absolute inline-flex items-center justify-center text-sm font-bold text-white bg-blue-500 border-2 border-white rounded-lg -top-4 end-5 px-4 py-1 tracking-wider ">\n          <span class="flex w-3 h-3 me-3 ${t} rounded-full absolute -top-1 -right-4 border-2 border-white"></span>\n          ${capitalizeFirstLetter(e.track_name)}\n        </span>\n        <span>\n         ${e.comment}\n         </span>\n        </p>\n    </div>\n  </li>\n  `}async function fetchBranchLectures(e){try{const t=await fetch(`functions/Lectures/get_lectures.php?branch_id=${e}`);if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);const r=await t.json();if("success"!==r.status)throw new Error(r.message||"Failed to fetch lectures");r.data&&r.data.length>0?(lecturesCards.innerHTML="",r.data.forEach((e=>{let t=setCard(e);lecturesCards.innerHTML+=t}))):lecturesCards.innerHTML='<p><i class="fas fa-arrow-up-long mr-2"></i>Select Branch</p>'}catch(e){console.error("Error fetching lectures:",e),lecturesCards.innerHTML="<p>Failed to load lectures. Please try again.</p>"}}async function fetchInstructors(e){try{const t=await fetch(`functions/Instructors/get_instructors.php?branch_id=${e}`);if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);const r=await t.json();instructor.innerHTML="<option value=''>Choose Instructor</option>",r.data&&r.data.forEach((e=>{const t=document.createElement("option");t.value=e.id,t.textContent=capitalizeFirstLetter(e.username),instructor.appendChild(t)}))}catch(e){console.error("Error fetching instructors:",e),instructor.innerHTML="<option value=''>Error loading instructors</option>"}}function showTimeOptions(){groupTimeSelect.innerHTML="<option value=''>Select Group Time</option>",[10,12.3,3,6,8,2,5].forEach((e=>{const t=document.createElement("option");t.value=e,t.textContent=e,t.classList.add("font-semibold"),8==e?t.textContent="Online":2!=e&&5!=e||(t.textContent=`${e} [ Friday ]`),groupTimeSelect.appendChild(t)}))}function resetAllWithNoBranch(){tracks.innerHTML="<option value=''>Select Branch First</option>",instructor.innerHTML="<option value=''>Select Branch First</option>",document.querySelector("#group-time option:first-child").innerHTML="Select Branch First",document.querySelector("#group-time option:first-child").selected="true",document.querySelectorAll("#group-time option:not(:first-child)").forEach((e=>e.remove()))}function showLoadingSkeleton(){skeleton.classList.remove("hidden"),arrowWarning.classList.add("hidden"),lecturesCards.classList.add("hidden"),lecturesCards.innerHTML=""}document.addEventListener("DOMContentLoaded",(async()=>{const e=getMetaContent("branch"),t=getMetaContent("role");try{const r=await fetch("functions/Branches/get_branches.php"),n=await r.json();n.data&&(branch.innerHTML='<option value="" selected>Choose a branch</option>',n.data.forEach((e=>{const t=document.createElement("option");t.value=e.id,t.textContent=capitalizeFirstLetter(e.name),branch.appendChild(t)}))),"cs"==t?(await wait(1e3),skeleton.classList.add("hidden"),await fetchBranchLectures(e),await fetchTracks(),showTimeOptions(),await fetchInstructors(e)):(skeleton.classList.add("hidden"),arrowWarning.classList.remove("hidden"))}catch(e){console.error("Error during initialization:",e),skeleton.classList.add("hidden"),lecturesCards.innerHTML="<p>Failed to load initial data. Please refresh the page.</p>"}})),branch.onchange=async function(){try{if(showLoadingSkeleton(),!branch.value)return resetAllWithNoBranch(),await fetchBranchLectures(this.value),await wait(1e3),void skeleton.classList.add("hidden");await Promise.all([fetchBranchLectures(this.value),fetchTracks(),fetchInstructors(this.value)]),showTimeOptions(),groupTimeSelect.value="",await wait(1e3),skeleton.classList.add("hidden")}catch(e){console.error("Error in branch change handler:",e),lecturesCards.classList.remove("hidden"),lecturesCards.innerHTML="<p>An error occurred. Please try again.</p>"}},tracks.onchange=async function(){try{if(showLoadingSkeleton(),document.querySelector("#instructor option:first-child").selected="true",document.querySelector("#group-time option:first-child").selected="true",""==this.value)return await fetchBranchLectures(branch.value),await wait(1e3),skeleton.classList.add("hidden"),void lecturesCards.classList.remove("hidden");branch.value&&await fetchBranchAndTrackLec(branch.value,this.value),await wait(1e3),skeleton.classList.add("hidden"),lecturesCards.classList.remove("hidden")}catch(e){console.error("Error in track change:",e),lecturesCards.innerHTML="<p>Failed to load lectures. Please try again.</p>",skeleton.classList.add("hidden"),lecturesCards.classList.remove("hidden")}},groupTimeSelect.onchange=async function(){try{if(showLoadingSkeleton(),""==this.value)return await fetchBranchLectures(branch.value),await wait(1e3),skeleton.classList.add("hidden"),void lecturesCards.classList.remove("hidden");let e="";e=branch.value?`functions/Lectures/get_lectures.php?branch_id=${branch.value}&time=${this.value}`:`functions/Lectures/get_lectures.php?time=${this.value}`;const t=await fetch(e);if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);const r=await t.json();if("success"!=r.status)throw new Error(r.message||"Failed to fetch lectures");r.data.length>0?(lecturesCards.innerHTML="",r.data.forEach((e=>{let t=setCard(e);lecturesCards.innerHTML+=t}))):lecturesCards.innerHTML="<p>No lectures found</p>"}catch(e){console.error("Error in time change:",e),lecturesCards.innerHTML="<p>Failed to load lectures. Please try again.</p>"}finally{await wait(1e3),skeleton.classList.add("hidden"),lecturesCards.classList.remove("hidden")}},instructor.onchange=async function(){try{if(showLoadingSkeleton(),""==this.value)return await fetchBranchLectures(branch.value),await wait(1e3),skeleton.classList.add("hidden"),void lecturesCards.classList.remove("hidden");const e=await fetch(`functions/Lectures/get_lectures.php?instructor_id=${this.value}`);if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);const t=await e.json();if("success"!=t.status)throw new Error(t.message||"Failed to fetch lectures");t.data.length>0?(lecturesCards.innerHTML="",t.data.forEach((e=>{let t=setCard(e);lecturesCards.innerHTML+=t}))):lecturesCards.innerHTML="<p>No lectures found</p>",groupTimeSelect.value=""}catch(e){console.error("Error in instructor change:",e),lecturesCards.innerHTML="<p>Failed to load lectures. Please try again.</p>"}finally{await wait(1e3),skeleton.classList.add("hidden"),lecturesCards.classList.remove("hidden")}};