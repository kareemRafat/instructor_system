import{getMetaContent,capitalizeFirstLetter,wait}from"./helpers.js";const branch=document.getElementById("branch"),instructor=document.getElementById("instructor"),lecturesCards=document.getElementById("lecturesCards"),groupTimeSelect=document.getElementById("group-time"),tracks=document.getElementById("tracks"),skeleton=document.getElementById("skeleton"),arrowWarning=document.getElementById("arrow-warning");async function fetchTracks(){try{const e=await fetch("functions/Tracks/get_tracks.php");if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);const t=await e.json();tracks.innerHTML="<option value=''>Select Track</option>",t.data&&t.data.forEach((e=>{const t=document.createElement("option");t.value=e.id,t.textContent=capitalizeFirstLetter(e.name),tracks.appendChild(t)}))}catch(e){console.error("Error fetching tracks:",e),tracks.innerHTML="<option value=''>Error loading tracks</option>"}}async function fetchBranchAndTrackLec(e,t){try{const r=await fetch(`functions/Lectures/get_lectures.php?branch_id=${e}&track_id=${t}`);if(!r.ok)throw new Error(`HTTP error! status: ${r.status}`);const n=await r.json();if("success"!=n.status)throw new Error(n.message||"Failed to fetch lectures");n.data.length>0?(lecturesCards.innerHTML="",n.data.forEach((e=>{let t=setCard(e);lecturesCards.innerHTML+=t}))):lecturesCards.innerHTML="<p>No lectures found</p>"}catch(e){console.error("Error fetching lectures:",e),lecturesCards.innerHTML="<p>Failed to load lectures. Please try again.</p>"}}function setCard(e){let t="",r=e.track_name.toLowerCase();return"php"==r||r.toLowerCase().includes("database")||r.includes("project")?t="bg-red-500":"html"==r||r.includes("css")?t="bg-green-500":r.includes("javascript")&&(t="bg-cyan-500"),`\n<li class="">\n    <div class="relative">\n        <div\n            class="bg-white rounded-2xl shadow-sm transition-all duration-300 overflow-hidden border border-gray-100">\n            <div class="bg-gradient-to-r from-blue-500 to-purple-500 px-6 py-2 traking-wider">\n                <div class="flex items-center justify-between">\n                    <div class="flex items-center gap-3">\n                        <div class="w-9 h-9 bg-white/10 rounded-full flex items-center justify-center">\n                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-6 h-6 text-white">\n                              <path fill-rule="evenodd" d="M2.25 6a3 3 0 0 1 3-3h13.5a3 3 0 0 1 3 3v12a3 3 0 0 1-3 3H5.25a3 3 0 0 1-3-3V6Zm3.97.97a.75.75 0 0 1 1.06 0l2.25 2.25a.75.75 0 0 1 0 1.06l-2.25 2.25a.75.75 0 0 1-1.06-1.06l1.72-1.72-1.72-1.72a.75.75 0 0 1 0-1.06Zm4.28 4.28a.75.75 0 0 0 0 1.5h3a.75.75 0 0 0 0-1.5h-3Z" clip-rule="evenodd" />\n                            </svg>\n                        </div>\n                        <div>\n                            <h2 class="text-lg tracking-wider font-bold text-white">${capitalizeFirstLetter(e.group_name)}</h2>\n                        </div>\n                    </div>\n                    <div class="text-right">\n                        <div class="text-white font-semibold">${2==e.group_time||5==e.group_time?e.group_time+" - Friday":8==e.group_time?"Online":e.group_time}</div>\n                    </div>\n                </div>\n            </div>\n            <div class="p-4">\n                <div class="flex flex-wrap gap-3 mb-4">\n                    <div class="flex items-center gap-2 bg-amber-50 px-2 py-1 rounded-lg border border-amber-200">\n                        <svg class="w-4 h-4 text-amber-600" fill="currentColor" viewBox="0 0 20 20">\n                            <path fill-rule="evenodd"\n                                d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z"\n                                clip-rule="evenodd"></path>\n                        </svg><span class="text-amber-700 font-medium text-sm">${e.group_start_date}</span>\n                    </div>\n                    <div class="flex items-center gap-2 bg-blue-50 px-3 py-2 rounded-lg border border-blue-200">\n                        <svg class="w-4 h-4 text-blue-600" fill="currentColor" viewBox="0 0 20 20">\n                            <path fill-rule="evenodd"\n                                d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z"\n                                clip-rule="evenodd"></path>\n                        </svg><span class="text-blue-700 font-medium text-sm">${2==e.group_time||5==e.group_time?"Friday":8==e.group_time?"Online":e.group_time}</span>\n                    </div>\n                </div>\n                <div class="flex items-center gap-3 mb-4 p-3 bg-gray-50 rounded-lg">\n                    <div class="w-10 h-10 bg-gradient-to-r bg-cyan-600 rounded-full flex items-center justify-center">\n                        <span class="text-white font-bold text-sm">${e.instructor_name[0].toUpperCase()}</span>\n                    </div>\n                    <div>\n                        <div class="text-gray-600 text-xs capitalize tracking-wide">\n                            Instructor\n                        </div>\n                        <div class="font-semibold text-gray-800">${capitalizeFirstLetter(e.instructor_name)}</div>\n                    </div>\n                </div>\n                <div class="mb-4">\n                    <div class="flex items-center gap-2 mb-2">\n                        <svg class="w-4 h-4 text-gray-400" fill="currentColor" viewBox="0 0 20 20">\n                            <path fill-rule="evenodd"\n                                d="M18 10c0 3.866-3.582 7-8 7a8.841 8.841 0 01-4.083-.98L2 17l1.338-3.123C2.493 12.767 2 11.434 2 10c0-3.866 3.582-7 8-7s8 3.134 8 7zM7 9H5v2h2V9zm8 0h-2v2h2V9zM9 9h2v2H9V9z"\n                                clip-rule="evenodd"></path>\n                        </svg><span class="text-gray-500 text-sm">Last comment â€¢ ${e.latest_comment_date}</span>\n                    </div>\n                </div>\n                <div class="relative bg-gradient-to-r from-blue-50 to-purple-50 rounded-xl p-4 border border-blue-100 h-[93px]">\n                    <div class="absolute -top-3 right-4">\n                        <span\n                            class="bg-gradient-to-r from-blue-500 to-purple-600 text-white px-4 py-1 rounded-full text-sm font-bold shadow-lg relative">${capitalizeFirstLetter(e.track_name)}\n                            <div\n                                class="absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full border-2 border-white">\n                            </div>\n                        </span>\n                    </div>\n                    <div class="mt-2">\n                        <p class="text-gray-700 font-medium" dir="rtl" >${e.comment}</p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</li>\n`}async function fetchBranchLectures(e){try{const t=await fetch(`functions/Lectures/get_lectures.php?branch_id=${e}`);if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);const r=await t.json();if("success"!==r.status)throw new Error(r.message||"Failed to fetch lectures");r.data&&r.data.length>0?(lecturesCards.innerHTML="",r.data.forEach((e=>{let t=setCard(e);lecturesCards.innerHTML+=t}))):lecturesCards.innerHTML='<p><i class="fas fa-arrow-up-long mr-2"></i>Select Branch</p>'}catch(e){console.error("Error fetching lectures:",e),lecturesCards.innerHTML="<p>Failed to load lectures. Please try again.</p>"}}async function fetchInstructors(e){try{const t=await fetch(`functions/Instructors/get_instructors.php?branch_id=${e}`);if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);const r=await t.json();instructor.innerHTML="<option value=''>Choose Instructor</option>",r.data&&r.data.forEach((e=>{const t=document.createElement("option");t.value=e.id,t.textContent=capitalizeFirstLetter(e.username),instructor.appendChild(t)}))}catch(e){console.error("Error fetching instructors:",e),instructor.innerHTML="<option value=''>Error loading instructors</option>"}}function showTimeOptions(){groupTimeSelect.innerHTML="<option value=''>Select Group Time</option>",[10,12.3,3,6,8,2,5].forEach((e=>{const t=document.createElement("option");t.value=e,t.textContent=e,t.classList.add("font-semibold"),8==e?t.textContent="Online":2!=e&&5!=e||(t.textContent=`${e} [ Friday ]`),groupTimeSelect.appendChild(t)}))}function resetAllWithNoBranch(){tracks.innerHTML="<option value=''>Select Branch First</option>",instructor.innerHTML="<option value=''>Select Branch First</option>",document.querySelector("#group-time option:first-child").innerHTML="Select Branch First",document.querySelector("#group-time option:first-child").selected="true",document.querySelectorAll("#group-time option:not(:first-child)").forEach((e=>e.remove()))}function showLoadingSkeleton(){skeleton.classList.remove("hidden"),arrowWarning.classList.add("hidden"),lecturesCards.classList.add("hidden"),lecturesCards.innerHTML=""}document.addEventListener("DOMContentLoaded",(async()=>{const e=getMetaContent("branch"),t=getMetaContent("role");try{const r=await fetch("functions/Branches/get_branches.php"),n=await r.json();n.data&&(branch.innerHTML='<option value="" selected>Choose a branch</option>',n.data.forEach((e=>{const t=document.createElement("option");t.value=e.id,t.textContent=capitalizeFirstLetter(e.name),branch.appendChild(t)}))),"cs"==t?(await wait(1e3),skeleton.classList.add("hidden"),await fetchBranchLectures(e),await fetchTracks(),showTimeOptions(),await fetchInstructors(e)):(skeleton.classList.add("hidden"),arrowWarning.classList.remove("hidden"))}catch(e){console.error("Error during initialization:",e),skeleton.classList.add("hidden"),lecturesCards.innerHTML="<p>Failed to load initial data. Please refresh the page.</p>"}})),branch.onchange=async function(){try{if(showLoadingSkeleton(),!branch.value)return resetAllWithNoBranch(),await fetchBranchLectures(this.value),await wait(1e3),void skeleton.classList.add("hidden");await Promise.all([fetchBranchLectures(this.value),fetchTracks(),fetchInstructors(this.value)]),showTimeOptions(),groupTimeSelect.value="",await wait(1e3),skeleton.classList.add("hidden")}catch(e){console.error("Error in branch change handler:",e),lecturesCards.classList.remove("hidden"),lecturesCards.innerHTML="<p>An error occurred. Please try again.</p>"}},tracks.onchange=async function(){try{if(showLoadingSkeleton(),document.querySelector("#instructor option:first-child").selected="true",document.querySelector("#group-time option:first-child").selected="true",""==this.value)return await fetchBranchLectures(branch.value),await wait(1e3),skeleton.classList.add("hidden"),void lecturesCards.classList.remove("hidden");branch.value&&await fetchBranchAndTrackLec(branch.value,this.value),await wait(1e3),skeleton.classList.add("hidden"),lecturesCards.classList.remove("hidden")}catch(e){console.error("Error in track change:",e),lecturesCards.innerHTML="<p>Failed to load lectures. Please try again.</p>",skeleton.classList.add("hidden"),lecturesCards.classList.remove("hidden")}},groupTimeSelect.onchange=async function(){try{if(showLoadingSkeleton(),""==this.value)return await fetchBranchLectures(branch.value),await wait(1e3),skeleton.classList.add("hidden"),void lecturesCards.classList.remove("hidden");let e="";e=branch.value?`functions/Lectures/get_lectures.php?branch_id=${branch.value}&time=${this.value}`:`functions/Lectures/get_lectures.php?time=${this.value}`;const t=await fetch(e);if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);const r=await t.json();if("success"!=r.status)throw new Error(r.message||"Failed to fetch lectures");r.data.length>0?(lecturesCards.innerHTML="",r.data.forEach((e=>{let t=setCard(e);lecturesCards.innerHTML+=t}))):lecturesCards.innerHTML="<p>No lectures found</p>"}catch(e){console.error("Error in time change:",e),lecturesCards.innerHTML="<p>Failed to load lectures. Please try again.</p>"}finally{await wait(1e3),skeleton.classList.add("hidden"),lecturesCards.classList.remove("hidden")}},instructor.onchange=async function(){try{if(showLoadingSkeleton(),""==this.value)return await fetchBranchLectures(branch.value),await wait(1e3),skeleton.classList.add("hidden"),void lecturesCards.classList.remove("hidden");const e=await fetch(`functions/Lectures/get_lectures.php?instructor_id=${this.value}`);if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);const t=await e.json();if("success"!=t.status)throw new Error(t.message||"Failed to fetch lectures");t.data.length>0?(lecturesCards.innerHTML="",t.data.forEach((e=>{let t=setCard(e);lecturesCards.innerHTML+=t}))):lecturesCards.innerHTML="<p>No lectures found</p>",groupTimeSelect.value=""}catch(e){console.error("Error in instructor change:",e),lecturesCards.innerHTML="<p>Failed to load lectures. Please try again.</p>"}finally{await wait(1e3),skeleton.classList.add("hidden"),lecturesCards.classList.remove("hidden")}};